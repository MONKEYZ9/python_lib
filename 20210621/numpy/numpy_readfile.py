import numpy as np

print( "--넘파이 배열의 차원/크기/모양 확인, 처리하기------" )
print( "--넘파이를 활용하여, 데이터 객체 생성하기---------" )

np_data = np.loadtxt('C:/Users/mingzzang/Desktop/PART12-20210621T000404Z-001/PART12/dataset/wine.csv', delimiter=",", dtype=np.float32)
print( np_data )
print( "-----------------------------------------" )


# 이게 와인 데이터야
# [[ 7.  1.  0. ...  9.  5.  1.]
#  [ 8.  1.  0. ... 10.  5.  1.]
#  [ 8.  1.  0. ... 10.  5.  1.]
#  ...
#  [ 7.  0.  0. ...  9.  6.  0.]
#  [ 6.  0.  0. ... 13.  7.  0.]
#  [ 6.  0.  0. ... 12.  6.  0.]]


# 1차원 배열을 만들거임
print( "--1차원 배열 선언 + 데이터 타입 변경------------" )
array_1d = np.array([8, 2, 2, 5, 9, 10, 13, 3], dtype=float)
print( array_1d )
print( "-----------------------------------------" )


print( "--2차원 배열 선언 + 데이터 타입 변경------------" )
array_2d = np.array([(1,2,3), (4,5,6), (7,8,9)], dtype=float)
print( array_2d )
print( "-----------------------------------------" )


print( "--다차원 배열 선언 + 무작위 값 삽입-------------" )
array_2d_empty = np.empty([3, 3])
# 3 * 3 3개 행 3개 열로 만들어 놓겠다는 거야
print( array_2d_empty )
print( "-----------------------------------------" )
print( "np.zeros() / np.ones()" )
print( "-----------------------------------------" )

print( "--넘파이에서 데이터를 정렬하기------------------" )
print( np.sort(array_1d))
print( "-----------------------------------------" )
print( "-----------------------------------------" )

print( "--넘파이와 넘파이를 결합하기--------------------" )
np_tmp = np.array([3, 8, 10, 5, 9, 99]) #방금 생성한거랑 위에 1차원 배열을 합칠거임
np_concat = np.concatenate([array_1d, np_tmp]) # concatenate 이라는 거로 한다는거야 pandas에도 있음 데이터를 결합할때 쓰임
# 이게 update라고 하는거야
print( np_concat )
print( "-----------------------------------------" )
print( "-----------------------------------------" )
# CRUD에서 돈다는 거야
# create, read, update, delete를 하는거야
# mysql을 위주로 하겠네
print( "--넘파이에서 '99' 값 제거하기------------------" )
np_concat_data_delete = np.delete(np_concat, [-1]) #delete를 불러서 배열을 가져와야 한다는거야
# 그리고 위치를 넣어야 해, -1은 마지막에 있는걸 지우는거야


print( np_concat_data_delete )
print( "-----------------------------------------" )
print( "-----------------------------------------" )


print( "--넘파이 배열 사이즈 확인, 처리하기--------------" )
print( "총 {} 개".format(np_data.size) ) # {} 문자열 포매팅 준비해주고
# size로 크기를 봤어
print( "-----------------------------------------" )
print( "-----------------------------------------" )

print( "--넘파이 배열 사이즈 확인, 처리하기--------------" )
print( "모양".format(np_data.shape) )
print( "{} x {}".format(np_data.shape[0], np_data.shape[1]) ) #모양이 어떻게 되어있는지를 확인하는거야 shape[0] 과 shape[1]의 차이가 뭘까
print( "-----------------------------------------" )
print( "-----------------------------------------" )

print( "--넘파이 배열 형태 변경-----------------------" )
np_concat_data_delete_copy = np.delete(np_concat, [0, 1]) #1차원 배열을 원하는 형태로 바꾸고 싶어
# [ 2.  5.  9. 10. 13.  3.  3.  8. 10.  5.  9. 99.] 이걸 말이야
print( np_concat_data_delete_copy )
print( len(np_concat_data_delete_copy) )

np_data_reshape = np_concat_data_delete_copy.reshape(6, 2)
# reshape로 변경을 해주는거야 
# [[ 2.  5.]
#  [ 9. 10.]
#  [13.  3.]
#  [ 3.  8.]
#  [10.  5.]
#  [ 9. 99.]]
# 데이터를 꼴을 계속 바꾸는 경우는 음성에서 데이터를 다룰때 많이 그런다고 함
print( np_data_reshape )
print( "-----------------------------------------" )
print( "-----------------------------------------" )


# 바꾼 데이터를 자르는 거야
# List에서 하는 거처럼 뜯어내는거야

print( "--넘파이 슬라이스 하기------------------------" )
print( np_data_reshape[0] )
print( np_data_reshape[0:2] )
# 0 ~ 3미만 까지 찍어 
# [ 2.  5.]
#  [ 9. 10.]
#  [13.  3.]
# 1을 넣었어 그래서 뒤에 거가 출력되는거야
# [ 5. 10.  3.]
# 이거 복습할때 이것저것 만들어서 해보자
print( np_data_reshape[0:3, 1] )
print( "-----------------------------------------" )
print( "-----------------------------------------" )



# [[ 2.  5.]
#  [ 9. 10.]
#  [13.  3.]
#  [ 3.  8.]
#  [10.  5.]
#  [ 9. 99.]]
# 이걸 넣어줘
print( "--넘파이 열 맞춰 배열 쌓기 (세로쌓기)------------" )
np_array_1 = np_data_reshape
np_array_2 = np_data_reshape
# 세로쌓기
np_array_vstack = np.vstack([np_array_1, np_array_2])
# 대괄호 중요하다 대괄호를 해줘야 한다
# [[ 2.  5.]
#  [ 9. 10.]
#  [13.  3.]
#  [ 3.  8.]
#  [10.  5.]
#  [ 9. 99.] 두번쌓는거잖아 세로로
#  [ 2.  5.]
#  [ 9. 10.]
#  [13.  3.]
#  [ 3.  8.]
#  [10.  5.]
#  [ 9. 99.]]

print( np_array_vstack )
print( "-----------------------------------------" )
print( "-----------------------------------------" )

print( "--넘파이 열 맞춰 배열 쌓기 (가로쌓기)------------" )
np_array_1 = np_data_reshape
np_array_2 = np_data_reshape
np_array_hstack = np.hstack([np_array_1, np_array_2])
# 대괄호 중요하다 대괄호를 해줘야 한다
# [[ 2.  5.  2.  5.]
#  [ 9. 10.  9. 10.]
#  [13.  3. 13.  3.]
#  [ 3.  8.  3.  8.]
#  [10.  5. 10.  5.]
#  [ 9. 99.  9. 99.]]

print( np_array_hstack )
print( "-----------------------------------------" )
print( "-----------------------------------------" )


# 자르는 것도 있어

print( "--넘파이 열 맞춰 배열 자르기 (세로쌓기)------------" )
np_array_hsplit = np.hsplit(np_array_hstack, 2)
print( np_array_hsplit )

# [array([[ 2.,  5.],
#        [ 9., 10.],
#        [13.,  3.],
#        [ 3.,  8.],
#        [10.,  5.],
#        [ 9., 99.]]), array([[ 2.,  5.],
#        [ 9., 10.],
#        [13.,  3.],
#        [ 3.,  8.],
#        [10.,  5.],
#        [ 9., 99.]])]
print( "-----------------------------------------" )
print( "-----------------------------------------" )


# 이거 함 해보자 
print( "--넘파이 열 맞춰 배열 자르기 (가로쌓기)------------" )
np_array_hsplit = np.hsplit(np_array_hstack, 2)
print( np_array_hsplit )


# 이거 정리하고 기억하기
print( "--넘파이 계산/통계 기능 활용하기------------" )
print( np_data_reshape )
print( np_data_reshape.sum() )
print( np_data_reshape.max() )
print( np_data_reshape.min() )
print( np_data_reshape.mean() ) #평균
print( np_data_reshape.std() ) #표준편차
print( "-----------------------------------------" )
print( "-----------------------------------------" )



print( "--넘파이 난수 생성/처리 기능 활용하기------------" )
# 정수형 배열 생성 randint 0부터 45까지 6개를 뽑는거야
# 로또 만들기
np_randint = np.random.randint(0, 45, size=6)
print( np_randint ) # 정수형 배열 생성
# [31 27 33  1  8 30]

np_rand = np.random.rand(3, 3) #rand는 0부터 1까지 랜덤한 값을 생성
# 여기서는 3행 3열 배열을 생성했으
print( np_rand ) # 0~1 사이의 값으로 3행 3열 배열
# [[0.16644076 0.58639125 0.09150005]
#  [0.11796267 0.78144307 0.47424785]
#  [0.64231439 0.95382523 0.53842391]]

np_randn = np.random.randn(4)
print( np_randn ) # 표준 정규 분포를 적용한 형태의 배열
# [ 1.18644626  0.86722352 -0.74452564  1.20335935]

print( "-----------------------------------------" )
print( "-----------------------------------------" )
print("데이터 가공")
# 머신러닝할때 필요함
# 학습이 잘 될 수 있게 훈련을 시키고 모델한테 데스트 시험을 보게 해야해
# 시험 볼 내용을 자르고 할 수 있게 하려면
# 다양하게 데이터를 적용해서 하려면 셔플링을 해줘야해
# 편향되지 않게
print( np_randint ) # shuffle 전 [31 27 33  1  8 30]
np.random.shuffle(np_randint)
print( np_randint ) # shuffle 후 [27 33 31  8 30  1]

# 데이터를 구축하고 choice 리스트를 삽입하고 몇개를 뽑을지 정수형태로 정하고 p (확률)을 열에 맞춰서 정해줘야 함
# 이거는 백분율로 된다고 생각하면 돼
# 결집체를 다룰때 한다고 생각하면 될듯
np_texts = ['A', 'B', 'C', 'D', 'E']
np_choice = np.random.choice(np_texts, 7, p=[0.1, 0, 0.3, 0.6, 0])
print(np_choice)

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# unique를 가지고 나온 데이터 종류별 하나씩 가져오는 거야
# 순정값만 뺀다고 생각하면 돼
print( np.unique(np_choice) )

np_test_array = np.array([ ("강남구", "성동구", "도봉구"), ("송파구","영등포구", "관악구"), ("서초구", "중랑구", "마포구") ])
print( np_test_array )
# [['강남구' '성동구' '도봉구']
#  ['송파구' '영등포구' '관악구']
#  ['서초구' '중랑구' '마포구']]
# T..?
# 가끔가다가 행과 열을 바꿔서 봐야 할 때도 있어
# 이때 T를 이용해서 해야해 Transform
print( np_test_array.T )
# [['강남구' '송파구' '서초구']
#  ['성동구' '영등포구' '중랑구']
#  ['도봉구' '관악구' '마포구']]
print( "-----------------------------------------" )
print( "-----------------------------------------" )

print( np_data )
print( "-----------------------------------------" )


# 이게 와인 데이터야
# [[ 7.  1.  0. ...  9.  5.  1.]
#  [ 8.  1.  0. ... 10.  5.  1.]
#  [ 8.  1.  0. ... 10.  5.  1.]
#  ...
#  [ 7.  0.  0. ...  9.  6.  0.]
#  [ 6.  0.  0. ... 13.  7.  0.]
#  [ 6.  0.  0. ... 12.  6.  0.]]
print(np_data.T)
# [[ 7.  8.  8. ...  7.  6.  6.]
#  [ 1.  1.  1. ...  0.  0.  0.]
#  [ 0.  0.  0. ...  0.  0.  0.]
#  ...
#  [ 9. 10. 10. ...  9. 13. 12.]
#  [ 5.  5.  5. ...  6.  7.  6.]
#  [ 1.  1.  1. ...  0.  0.  0.]]
# 원래는 와인데이터를 보면
# 와인별로 데이터를 봐야했는데
# T를 적용함으로 와인별 속성별로 볼 수 있게 되는거야